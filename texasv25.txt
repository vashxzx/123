#include <stdio.h>
#include<string.h>
//#include<memory.h>
//#include<stdlib.h>
//#include<sys/timeb.h> 
//一副牌的值和花色
 char *deck="23456789TJQKA";
 char *suit="CDHS";
 //手牌
 int deal[7];
 //手牌中每种点数的重复次数
 int count[13]={0};
 //手牌中每种花色的重复次数
 int count_suit[4]={0};
 //指向数组deal一行的指针
 int *p_deal;
 int i,j; //辅助变量
 char card[2]; //一张牌
 //当前要出的赌注（call ||raise）
 int bet=10;
//拥有的筹码
 int sum=5000;
 int pork_same_num(int *deal,int n,int m)//判断m-n+1张牌最多有多少相同的
 {
	 
	 int count_sub[12]={0};
	 int four=0;
	 int three=0;
	 int two=0;
	 for(int j=n;j<=m;++j)
		 ++count_sub[deal[j]>>2];

	 for(int i=0;i<=12;++i)
		 {
			 if(4==count_sub[i])
				 four=1;
			 else if(3==count_sub[i])
				 three =1;
			 else if(2==count_sub[i])
				 ++two;
		}
	 if(four)
		 return 6;
	 else if(three&&two)
		 return 5;
	 else if(three)
		 return 3;
	 else if(2==two)
		 return 2;
	 else if(two)
		 return 1;
	 else
		 return 0;
 }

 void call(const char* c="")//跟注，别人出多少我就出多少！
 {
     printf("%s\n",c);
 }

 void raise(const char* c="")//出2倍以上的注！
 {
     printf("%s\n",c);
 }

 void fold(const char *c="")//弃牌！
 {
     printf("%s,丫给老子等着！！！\n",c);
 }
 void judgemypork(int pork_num)
  {
      int rate_sum_bet=sum/bet;//拥有的筹码与要出的筹码的比值
      int pairs_num=0;//对牌数
      int three_num=0;//三条数2.11
      int four_num=0;//四条数0.024
      int flush_num=0;//同花数0.197
      int straight_num=0;//顺子数0.39

      //***************************************************我是分割线

  if(2==pork_num)//当前有两张牌
  {
    for(i=0;i<2 &&(scanf("%s",card)!=EOF);++i)

      deal[i]=((strchr(deck,card[0])-deck)<<2)+(strchr(suit,card[1])-suit);

   p_deal=deal;

   for(j=0;j<2;j++)
    ++count[p_deal[j]>>2];//利用计数器来记录每张牌重复的个数

   for(j=12;j>=0;--j) //记录了对牌对应count的下标 j
     if(2==count[j])
	 {
		  pairs_num=1;
		  break;
	 }
	
     if(pairs_num&&j>=9)//两张牌是对牌且牌值大于J
     {
         if(rate_sum_bet<=20)
              call();
         else
             raise();
     }
     else if(pairs_num)
     {
         if(rate_sum_bet>=30)//拥有的筹码与要出的筹码的比值
             call();
         else
             fold();

     }
     else//木有对子
     {
         if(rate_sum_bet>20)//2000/100=20
             call();
         else
             fold();
     }
   }
    //**************************************************我是分割线

   if(5==pork_num)
   {
	   
       for(i=0;i<5 &&(scanf("%s",card)!=EOF);++i)
         deal[i]=((strchr(deck,card[0])-deck)<<2)+(strchr(suit,card[1])-suit);
	   p_deal=deal;

	   for(j=0;j<5;++j)//五张牌花色计数
           ++count_suit[p_deal[j]&3];

	   for(j=0;j<5;j++)//五张牌点数计数
         ++count[p_deal[j]>>2];

       for(j=0;j<4;++j)
       {
        if(5==count_suit[j])
             flush_num=1;//同花
       }

       for(j=0;j<=8;++j)
		   //A2345也算顺子
           if(count[j]==1&&count[j+1]==1&&count[j+2]==1&&count[j+3]==1&&count[j+4]==1||count[0]==1&&count[1]==1&&count[2]==1&&count[3]==1&&count[12]==1)
                  straight_num=1;//顺子
     
       for(j=12;j>=0;--j)
       {
         if(count[j]==2)
               ++pairs_num;
         else if(3==count[j])
             three_num=1;
         else if(4==count[j])
             four_num=1;

       }
	     if(flush_num&&straight_num)//同花顺
                   raise("同花顺，哇咔咔！！+++");
       
		  else if(four_num)//五张时只有一人能构成四条
               call("四条，跟forever!");

          else if(three_num&&pairs_num==1)//有葫芦时若比值大于100则加注
           { 
			   if(rate_sum_bet>=100)
                   raise("老子有葫芦！我加！");
               else
                   call("老子有葫芦！我加跟");
           }

		   else if(flush_num)
                   call("同花哟~gggg");

           else if(three_num)//三条几率挺高的，需要分情况讨论
           {
               if(deal[0]==deal[1])//三条时若比值大于10且底牌是对牌则跟
			   {
				   if(rate_sum_bet>=10)
                   call("老子有三条！我加！");
				   else //三条时若比值大于10即使底牌是对牌则弃牌
				   fold();
			   }
               else if(deal[2]==deal[3]&&deal[2]==deal[4])//三条在公共牌
			   {
				  if(rate_sum_bet>=30)
				   call("老子有三条！我跟！");
				  else
				   fold();
			   }
			   else//三条中一对在公共牌
			   {
				  if(rate_sum_bet>=20)
				   call("老子有三张！我跟！");
				  else
				   fold();
			   }

           }

		     else if(pairs_num==2)//有两对时若比值大于10则跟否则器弃牌
           {
               if(rate_sum_bet>=10)
                   call("两对，我跟！");
               else
                   fold();
           }

			else if(pairs_num==1&&((deal[0]>>2)==(deal[1]>>2)))//两张牌中有一对且对牌在底牌中
           {
               if(rate_sum_bet<20)
                   fold();
               else
                   call("对子在底牌中，我跟！");
           }
           else if(pairs_num==1)//对子在公共牌中或底牌与公共牌组成对子
           {
               if(rate_sum_bet>=30)
                   call("只有一对哎");
               else
                   fold();
           }
           
           else
           {
               
               if(straight_num)
                   call("顺子啊！gggg");
               else//高牌直接弃牌，因为到这里高牌几乎必输无疑
                   fold();

           }
   }
   //**************************************************我就是分割线，咋了！
   if(6==pork_num)
   {
	   for(i=0;i<6 &&(scanf("%s",card)!=EOF);++i)
         deal[i]=((strchr(deck,card[0])-deck)<<2)+(strchr(suit,card[1])-suit);
	   p_deal=deal;

	   for(j=0;j<6;++j)//6张牌花色计数

           ++count_suit[p_deal[j]&3];

	   for(j=0;j<6;j++)//6张牌点数计数

         ++count[p_deal[j]>>2];

       for(j=0;j<4;++j)
       {
        if(5<=count_suit[j])
             flush_num=1;//同花
       }

       for(j=0;j<=8;++j)
		   //A2345也算顺子
           if(count[j]&&count[j+1]&&count[j+2]&&count[j+3]&&count[j+4]||count[0]==1&&count[1]==1&&count[2]==1&&count[3]==1&&count[12]==1)
                  straight_num=1;//顺子
     
       for(j=12;j>=0;--j)
       {
         if(2==count[j])
             ++pairs_num;
         else if(3==count[j])
             three_num=1;
         else if(4==count[j])
             four_num=1;

       }
	     if(flush_num&&straight_num)//同花顺
                raise("同花顺，哇咔咔！！+++");
       
		  else if(four_num)//四条复杂，分以下情况
		  {
			  int pork_same_number=pork_same_num(deal,2,5);//公共牌中点数相同的牌的数目
			  if(2==pork_same_number)//底牌和公共牌各两张，对方也可能有四条，比如我是33，对方44，公共为3344
               call("四条!");
			  else if(3==pork_same_number )//三张一样的在公共牌中，其他人绝不可能组成四条，但在发第七张牌的时候或许能成为同花顺，不过几率几乎为0
				call("四条，跟！");
			  else if(4==pork_same_number &&((deal[0]>>2)==12||(deal[1]>>2)==12))//四条出现在公共牌中若我有A，此剧必胜！
				  raise("四条和A，加！");
			  else//大家都是四条，但是你手里没有A，弃牌吧
				  fold();			    
		 }
          else if(three_num&&pairs_num==1)//有葫芦时，也要分情况
           { 
			   if(rate_sum_bet>=100)
                   raise("老子有葫芦！我加！");
               else
                   call("老子有葫芦！我加跟");
           }

		   else if(flush_num)//这里有两种情况
		   {
			   if((deal[0]&3)==(deal[1]&3))
			       call("不错的同花哟~gggg");
			   else
				   call("一般的同花~");
		  }

                   

           else if(three_num)//三条分下面情况
           {
               if((deal [0]>>2)==(deal[1]>>2))//2张同点数的底牌和一张公共组成三条
			   {
				   if(rate_sum_bet>10)
					   call("三条，跟！");
				   else
					   fold ();
			   }
			  
               else
                   call("老子有三张！我跟！");
           }

		     else if(pairs_num>=2)//有两对,六张牌有可能出现三对
           {
               if()
                   raise("两对，我加！");
               else
                   call("两对，我跟！");
           }

			else if(pairs_num==1&&j>=6)//两张牌中有一对且牌值大于8++++后面判断deal[0]和deal[1]
           {
               if(rate_sum_bet<=20)
                   fold();
               else
                   call("对子挺大，我跟！");
           }
           else if(pairs_num==1)//有一对但是小于8++++后面判断deal[0]和deal[1]
           {
               if(rate_sum_bet>=100)
                   call("只有一对哎");
               else
                   fold();

           }
           
           else
           {
               
               if(straight_num)
                   call("顺子啊！gggg");
               else//高牌直接弃牌，因为到这里高牌几乎必输无疑
                   fold();

           }
   }
    //**************************************************分割线=^ω^=！
   if(7==pork_num)
   {
	   for(i=0;i<7 &&(scanf("%s",card)!=EOF);++i)
         deal[i]=((strchr(deck,card[0])-deck)<<2)+(strchr(suit,card[1])-suit);
	   p_deal=deal;

	   for(j=0;j<7;++j)//7张牌花色计数
           ++count_suit[p_deal[j]&3];

	   for(j=0;j<7;j++)//7张牌点数计数
         ++count[p_deal[j]>>2];

       for(j=0;j<4;++j)
       {
        if(5<=count_suit[j])
             flush_num=1;//同花
       }

       for(j=0;j<=8;++j)
           if(count[j]&&count[j+1]&&count[j+2]&&count[j+3]&&count[j+4]||count[0]==1&&count[1]==1&&count[2]==1&&count[3]==1&&count[12]==1)//A2345也算顺子
                  straight_num=1;//顺子

     
       for(j=12;j>=0;--j)
       {
         if(count[j]==2)
               ++pairs_num;
         else if(3==count[j])
             three_num=1;
         else if(4==count[j])
             four_num=1;

       }
	       if(flush_num&&straight_num)//同花顺
                raise("同花顺，哇咔咔！！+++");
       
		  
		  else if(four_num)//四条复杂，分以下情况
		  {
			  int pork_same_number=pork_same_num(deal,2,6);//公共牌中可以组成的牌型
			  if(1==pork_same_number)//底牌和公共牌各两张，对方也可能有四条，比如我是33，对方44，公共为33445；对方可能组成同花顺如33456 +78
					call("四条!");
			  else if(3==pork_same_number )//三张一样的在公共牌中
				  {
					if(deal[0]==deal[1])//底牌相等，说明公共牌有一对和底牌相等的底牌为33，公共为44433，对方可能组成4444的四条；对方可能组成同花顺
						call("四条d0=d1，跟！");
					else//底牌不同牌型为34 33355，对方可能为5555；对方可能组成同花顺
						call("四条d0！=d1，跟！");
					}
			  else if(6==pork_same_number &&((deal[0]>>2)==12||(deal[1]>>2)==12))//四条出现在公共牌中若我有A，此局必胜；对方无法组成同花顺
				  raise("四条和A，加！");
			  else//大家都是四条，但是你手里没有A，弃牌吧
				  fold();			    
		 }

          else if(three_num&&pairs_num)//葫芦复杂，分以下情况
           { 
			   int pork_same_number=pork_same_num(deal,2,6);//公共牌可以组成的牌型
			   if(5==pork_same_number)//公共牌葫芦，对方很可能有葫芦四条，但是绝不可能有同花顺
			   {
				   if(deal[0]==deal[1]&&(deal[0]>>2)==12)
					   call("公共牌葫芦我有对A");
				   else
					   fold("都是葫芦");
			   }
		
               else if(3==pork_same_number)//公共牌是三条，对方可能有葫芦,四条或者同花顺
			   {
				   if(rate_sum_bet >=10)
					   call("葫芦，赌一把");
				   else
					   fold("葫芦，对方可能有四条或同花顺");
			   }
			   else if(2==pork_same_number)//公共牌是两对对方可能有葫芦，四条或者同花顺，这里deal[0],和deal[1]对比也应该加进去
			   {
				    if(rate_sum_bet >=10)
					   call("葫芦，赌一把");
				   else
					   fold("葫芦，对方可能有四条或同花顺");
			   }
			   else//公共牌是一对，对方可能有葫芦，四条或者同花顺，这里deal[0],和deal[1]对比也应该加进去
				   call("应该能赢的葫芦");
           }

		   else if(flush_num)

                   call("同花哟~gggg");

           else if(three_num)//++++后面判断deal[0]和deal[1]
           {
               if(rate_sum_bet>=100)//有三张点数一样的时若比值大于100则加注
                   raise("老子有三张！我加！");
               else
                   call("老子有三张！我跟！");
           }

		     else if(pairs_num==2)//有两对时若比值大于100则加注++++后面判断deal[0]和deal[1]
           {
               if(rate_sum_bet>=100)
                   raise("两对，我加！");
               else
                   call("两对，我跟！");
           }

			else if(pairs_num==1&&j>=6)//两张牌中有一对且牌值大于8++++后面判断deal[0]和deal[1]
           {
               if(rate_sum_bet<=50)
                   fold();
               else
                   call("奶子挺大，我跟！");
           }
           else if(pairs_num==1)//有一对但是小于8++++后面判断deal[0]和deal[1]
           {
			   if(rate_sum_bet>=100&&deal[0]==deal[1])//跟注很小，对牌在底牌中，
                   call("只有一对哎");
               else
                   fold();
           }
           
           else
           { 
               if(straight_num)
                   call("顺子啊！gggg");
               else//高牌直接弃牌，因为到这里高牌必输无疑
                   fold();
           }
   }

 
  }
int main()
{

	judgemypork (6);
	
return 0;

}

