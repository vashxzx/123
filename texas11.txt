
#include<stdio.h>
#include<string.h>
char *deck="23456789TJQKA";
char *suit="CDHS";
int deal[7];
int count[13]={0}; //手牌中每种牌值的重复次数
int count_suit[4]={0};//手牌中每种花色的重复次数

char card[50]={'\0'}; //一张牌
int bet=100;//当前要出的赌注（call raise）
int sum=2000;//拥有的筹码


void judgemypork(int pork_num)
{
    int rate_sum_bet=sum/bet;//拥有的筹码与要出的筹码的比值
    int pairs_num=0;//对牌数
    int three_num=0;//三条数2.11
    int four_num=0;//四条数0.024
    int flush_num=0;//同花数0.197
    int straight_num=0;//顺子数0.39

    //***************************************************我是分割线

if(2==pork_num)//当前有两张牌
{
  for(int i=0;i<2;++i)
    deal[i]=((strchr(deck,card[i*2+1])-deck)<<2)+(strchr(suit,card[i*2])-suit);

 int *p_deal=deal;

 for(int j=0;j<2;j++)
  ++count[p_deal[j]>>2];//利用计数器来记录每张牌重复的个数

 for(int j=12;j>=0;--j)
 {
   if(2==count[j])
   {
       pairs_num=1;
       break;
   }


 }

   if(pairs_num&&j>=9)//两张牌是对牌且牌值大于j
   {
       if(rate_sum_bet<=10)
            call();
       else
           raise();
   }
   else if(pairs_num)
   {
       if(rate_sum_bet>=10)//拥有的筹码与要出的筹码的比值
           call();
       else
           fold();

   }
   else//木有对子
   {
       if(rate_sum_bet>=5)
           call();
       else
           fold();
   }
 }
  //**************************************************我是分割线

if(5==pork_num)
{

    for(int i=2;i<5;++i)
      deal[i]=((strchr(deck,card[2*i+1])-deck)<<2)+(strchr(suit,card[2*i])-suit);
    p_deal=deal;

    for(int j=0;j<5;++j)//五张牌花色计数
        ++count_suit[p_deal[j]&3];

    for(int j=0;j<5;j++)//五张牌点数计数
      ++count[p_deal[j]>>2];

    for(int j=0;j<4;++j)
    {
     if(5==count_suit[j])
          flush_num=1;//同花
    }

    for(int j=0;j<=8;++j)
        //A2345也算顺子
        if(count[j]==1&&count[j+1]==1&&count[j+2]==1&&count[j+3]==1&&count[j+4]==1||count[0]==1&&count[1]==1&&count[2]==1&&count[3]==1&&count[12]==1)
               straight_num=1;//顺子

    for(int j=12;j>=0;--j)
    {
      if(count[j]==2)
            ++pairs_num;
      else if(3==count[j])
          three_num=1;
      else if(4==count[j])
          four_num=1;

    }
      if(flush_num&&straight_num)//同花顺
                raise("同花顺，哇咔咔！！+++");

       else if(four_num)//五张时只有一人能构成四条
            call("四条，跟forever!");

       else if(three_num&&pairs_num==1)//有葫芦时若比值大于100则加注
        {
            if(rate_sum_bet>=10)
                raise("老子有葫芦！我加！");
            else
                call("老子有葫芦！我加跟");
        }

        else if(flush_num)
                call("同花哟~gggg");

        else if(three_num)//三条几率挺高的，需要分情况讨论
        {
            if(deal[0]==deal[1])
            {
                if(rate_sum_bet>=5)
                call("老子有三条！我加！");
                else
                fold();
            }
            else if(deal[2]==deal[3]&&deal[2]==deal[4])//三条在公共牌
            {
               if(rate_sum_bet>=10)
                call("老子有三条！我跟！");
               else
                fold();
            }
            else//三条中一对在公共牌
            {
               if(rate_sum_bet>=5)
                call("老子有三张！我跟！");
               else
                fold();
            }

        }

          else if(pairs_num==2)//有两对时若比值大于10则跟否则器弃牌
        {
            if(rate_sum_bet>=10)
                call("两对，我跟！");
            else
                fold();
        }

         else if(pairs_num==1&&((deal[0]>>2)==(deal[1]>>2)))//两张牌中有一对且对牌在底牌中
        {
            if(rate_sum_bet<20)
                fold();
            else
                call("对子在底牌中，我跟！");
        }
        else if(pairs_num==1)//对子在公共牌中或底牌与公共牌组成对子
        {
            if(rate_sum_bet>=30)
                call("只有一对哎");
            else
                fold();
        }

        else
        {
            if(straight_num)
                call("顺子啊！gggg");
            else//高牌直接弃牌，因为到这里高牌几乎必输无疑
                fold();
        }
}

}

